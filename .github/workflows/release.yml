name: SmartTodo NativeAOT Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  prepare:
    name: üìù Prepare Release
    runs-on: ubuntu-latest
    outputs:
      release_notes: ${{ steps.generate-notes.outputs.content }}
    steps:
      - name: üîç Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìÑ Generate Release Notes
        id: generate-notes
        run: |
          if git describe --tags --abbrev=0 &> /dev/null; then
            prev_tag=$(git describe --tags --abbrev=0)
            commit_range="$prev_tag..HEAD"
          else
            prev_tag="Initial Release"
            commit_range="HEAD"
          fi

          changes=$(git log --pretty=format:"- [%h](https://github.com/$GITHUB_REPOSITORY/commit/%H) %s (%an)" $commit_range)
          compare_url="https://github.com/$GITHUB_REPOSITORY/compare/$prev_tag...${{ github.ref_name }}"

          notes="## üöÄ SmartTodo ${{ github.ref_name }}\n\n"
          notes+="### ‚ú® What's Changed\n${changes}\n\n"
          notes+="üìö **Full Changelog**: [View Changes]($compare_url)"
          
          echo "content=$notes" >> $GITHUB_OUTPUT
          mkdir -p ./notes
          echo -e "$notes" > ./notes/release_notes.md

  build:
    name: Build (${{ matrix.rid }})
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Windows
          - os: windows-latest
            rid: win-x86
            suffix: .exe
          - os: windows-latest
            rid: win-x64
            suffix: .exe
          - os: windows-latest
            rid: win-arm64
            suffix: .exe

          # Linux
          - os: ubuntu-latest
            rid: linux-x64
            suffix: ""
          - os: ubuntu-latest
            rid: linux-arm64
            suffix: ""
          - os: ubuntu-latest
            rid: linux-arm
            suffix: ""

          # macOS
          - os: macos-latest
            rid: osx-x64
            suffix: ""
          - os: macos-latest
            rid: osx-arm64
            suffix: ""

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.200

      - name: ‚öôÔ∏è Install Dependencies
        if: runner.os != 'Windows'
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install -y clang lld

            case "${{ matrix.rid }}" in
              linux-arm64)
                sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
                ;;
              linux-arm)
                sudo apt-get install -y gcc-arm-linux-gnueabihf binutils-arm-linux-gnueabihf
                ;;
            esac

          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install lld
          fi

      - name: üèóÔ∏è Publish NativeAOT for linux-arm and linux-arm64
        if: matrix.rid == 'linux-arm' || matrix.rid == 'linux-arm64'
        shell: bash
        run: |
          TARGET_TRIPLE=""
          LD_FLAGS=""
          
          if [[ "${{ matrix.rid }}" == "linux-arm64" ]]; then
            TARGET_TRIPLE="aarch64-linux-gnu"
          elif [[ "${{ matrix.rid }}" == "linux-arm" ]]; then
            TARGET_TRIPLE="arm-linux-gnueabihf"
          fi
          
          dotnet publish Todo.Cli/Todo.Cli.csproj \
            -r ${{ matrix.rid }} \
            -c Release \
            -p:PublishAot=true \
            -p:DebugType=None \
            -p:DebugSymbols=false \
            -p:EnableCompressionInSingleFile=true \
            -p:IlcGenerateStackTraceData=false \
            -p:IlcOptimizationPreference=Speed \
            -p:IlcTargetTriple=$TARGET_TRIPLE \
            "-p:IlcLinkerFlags=-fuse-ld=lld --target=$TARGET_TRIPLE" \
            -o artifacts/publish/${{ matrix.rid }}
          
          mv artifacts/publish/${{ matrix.rid }}/Todo.Cli${{ matrix.suffix }} artifacts/SmartTodo-${{ matrix.rid }}${{ matrix.suffix }}

      - name: üèóÔ∏è Publish NativeAOT for other platforms
        if: matrix.rid != 'linux-arm' && matrix.rid != 'linux-arm64'
        shell: bash
        run: |
          dotnet publish Todo.Cli/Todo.Cli.csproj \
            -r ${{ matrix.rid }} \
            -c Release \
            -p:PublishAot=true \
            -p:DebugType=None \
            -p:DebugSymbols=false \
            -p:EnableCompressionInSingleFile=true \
            -p:IlcGenerateStackTraceData=false \
            -p:IlcOptimizationPreference=Speed \
            -o artifacts/publish/${{ matrix.rid }}
          
          mv artifacts/publish/${{ matrix.rid }}/Todo.Cli${{ matrix.suffix }} artifacts/SmartTodo-${{ matrix.rid }}${{ matrix.suffix }}

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: artifacts/SmartTodo-*
          retention-days: 3

  release:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: artifacts

      - name: Download Release Notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: notes
        continue-on-error: true

      - name: Create Release Notes if missing
        run: |
          mkdir -p notes
          if [ ! -f ./notes/release_notes.md ]; then
            echo "## üöÄ SmartTodo ${{ github.ref_name }}" > ./notes/release_notes.md
            echo -e "\n### ‚ú® What's Changed\n- Automated release" >> ./notes/release_notes.md
          fi

      - name: üè∑Ô∏è Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: "SmartTodo ${{ github.ref_name }}"
          body_path: ./notes/release_notes.md
          files: |
            artifacts/SmartTodo-*
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}